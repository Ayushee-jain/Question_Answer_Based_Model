# -*- coding: utf-8 -*-
"""Question_Answer_based_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E5ZIlL1_ZjZRys3K2e97r_KNU63Y9nwl
"""

import pandas as pd
import numpy as np

data=pd.DataFrame({'Question':["What is the helpline number?","What happened in Uttarakhand?","How many people are affected?","Which districts are the most flooded regions in uttarakhand?","In which district the glacier burst first?","Which mountian glacier broke off?"],'Answer':["1070 or 9557444486","glacier broke in","Around 100 to 200","Chamoli, Haridwar, Nainital, Pithoragarh, and Uttarkashi","Chamoli","A portion of Nanda Devi"]})

data

def getResults(questions, fn):
    def getResult(q):
        answer, score, prediction = fn(q)
        return [q, prediction, answer, score]
    return pd.DataFrame(list(map(getResult, questions)), columns=["Q", "Prediction", "A", "Score"])
test_data = [
    "Can anyone tell what is the helpline number of Uttarakhand Government?",
    "Can anyone tell what is the helpline number of Uttarakhand Government",
    "Is something happened in Uttarakhand?",
    "In which district the glacier burst first?",
    "Extemely flooded regions are?",
    "Where was glacier broke off",
]

import re
def getNaiveAnswer(q):
    row = data.loc[data['Question'].str.contains(re.sub(r"[^\w'\s)]+", "", q),case=False)]
    if len(row) > 0:
        return row["Answer"].values[0], 1, row["Question"].values[0]
    return "Sorry, I didn't get you.", 0, ""
getResults(test_data, getNaiveAnswer)

pip install python-Levenshtein

from Levenshtein import ratio
def getApproximateAnswer(q):
    max_score = 0
    answer = ""
    prediction = ""
    for idx, row in data.iterrows():
        score = ratio(row["Question"], q)
        if score >= 0.9:
            return row["Answer"], score, row["Question"]
        elif score > max_score:
            max_score = score
            answer = row["Answer"]
            prediction = row["Question"]
    if max_score > 0.8:
        return answer, max_score, prediction
    return "Sorry, I didn't get you.", max_score, prediction
getResults(test_data, getApproximateAnswer)

from Levenshtein import ratio
def getApproximateAnswer2(q):
    max_score = 0
    answer = ""
    prediction = ""
    for idx, row in data.iterrows():
        score = ratio(row["Question"], q)
        if score >= 0.9:
            return row["Answer"], score, row["Question"]
        elif score > max_score:
            max_score = score
            answer = row["Answer"]
            prediction = row["Question"]
    if max_score > 0.3:
        return answer, max_score, prediction
    return "Sorry, I didn't get you.", max_score, prediction
getResults(test_data, getApproximateAnswer2)

ques=input()
print(getResults([ques],getApproximateAnswer2)['A'][0])

